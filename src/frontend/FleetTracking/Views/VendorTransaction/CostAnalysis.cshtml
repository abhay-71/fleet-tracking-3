@{
    ViewData["Title"] = "Vendor Cost Analysis";
    
    // Define callback functions at the top of the file to avoid lambda expression errors
    var tickCallbackCode = "function(value) { return '$' + value.toLocaleString(); }";
    var tooltipCallbackCode = "function(context) { return '$' + context.parsed.y.toLocaleString(); }";
    var doughnutTooltipCallbackCode = "function(context) { " +
        "var label = context.label || ''; " +
        "var value = context.parsed || 0; " +
        "var total = 0; " +
        "for (var i = 0; i < context.dataset.data.length; i++) { " +
        "   total += Number(context.dataset.data[i]); " +
        "} " +
        "var percentage = Math.round((value / total) * 100); " +
        "return label + ': $' + value.toLocaleString() + ' (' + percentage + '%)'; " +
        "}";
    var barTooltipCallbackCode = "function(context) { return '$' + context.parsed.x.toLocaleString(); }";
    var stackedBarTooltipCallbackCode = "function(context) { return context.dataset.label + ': $' + context.parsed.y.toLocaleString(); }";
}

<div class="container-fluid px-4 py-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="h3 mb-0">Vendor Cost Analysis</h1>
            <p class="text-muted">Analyze vendor spending patterns and expenses</p>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <a asp-controller="Vendor" asp-action="Index" class="btn btn-outline-primary">
                    <i class="bi bi-list"></i> Vendor List
                </a>
                <a asp-controller="Vendor" asp-action="Analytics" class="btn btn-outline-primary">
                    <i class="bi bi-bar-chart"></i> Performance Analytics
                </a>
                <a asp-action="Index" class="btn btn-outline-primary">
                    <i class="bi bi-receipt"></i> Transactions
                </a>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <!-- Spending Overview -->
        <div class="col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Monthly Spending Trends</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlySpendingChart" height="100"></canvas>
                </div>
            </div>
        </div>

        <!-- Key Metrics -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Spending Overview</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span>Total Transactions:</span>
                        <span class="badge bg-primary rounded-pill">
                            @{
                                var totalTransactions = 0;
                                if (ViewBag.SpendByType != null)
                                {
                                    foreach (var item in ViewBag.SpendByType)
                                    {
                                        totalTransactions += item.Count;
                                    }
                                }
                            }
                            @totalTransactions
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span>Total Spend:</span>
                        <span class="fw-bold">
                            @{
                                var totalSpend = 0m;
                                if (ViewBag.SpendByType != null)
                                {
                                    foreach (var item in ViewBag.SpendByType)
                                    {
                                        totalSpend += item.TotalAmount;
                                    }
                                }
                            }
                            @totalSpend.ToString("C")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span>Average Transaction:</span>
                        <span>
                            @{
                                var count = totalTransactions;
                                var total = totalSpend;
                                var average = count > 0 ? total / count : 0;
                            }
                            @average.ToString("C")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span>Top Expense Type:</span>
                        <span>
                            @{
                                // Fix lambda expression by calculating in C# instead
                                var topType = ViewBag.SpendByType != null ? 
                                    GetTopExpenseType(ViewBag.SpendByType) : null;
                            }
                            @(topType != null ? topType.TransactionTypeDisplayName : "N/A")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Top Vendor:</span>
                        <span>
                            @{
                                // Fix lambda expression by calculating in C# instead
                                var topVendor = ViewBag.VendorAnalysis != null ?
                                    GetTopVendor(ViewBag.VendorAnalysis) : null;
                            }
                            @(topVendor != null ? topVendor.VendorName : "N/A")
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Spending by Type -->
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Spending by Category</h5>
                </div>
                <div class="card-body">
                    <canvas id="spendingByCategoryChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Top Vendors by Spend -->
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Top Vendors by Spend</h5>
                </div>
                <div class="card-body">
                    <canvas id="topVendorsChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Vehicle Expenses -->
        <div class="col-md-12">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Vehicle Maintenance and Service Costs</h5>
                </div>
                <div class="card-body">
                    <canvas id="vehicleCostChart" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Vendor Costs Table -->
        <div class="col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Vendor Cost Analysis</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Vendor</th>
                                    <th>Transactions</th>
                                    <th>Total Spent</th>
                                    <th>Average Transaction</th>
                                    <th>Top Expense</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var vendor in ViewBag.VendorAnalysis)
                                {
                                    <tr>
                                        <td>@vendor.VendorName</td>
                                        <td>@vendor.TotalTransactions</td>
                                        <td>@vendor.TotalSpent.ToString("C")</td>
                                        <td>@vendor.AverageAmount.ToString("C")</td>
                                        <td>
                                            @{
                                                // Fix lambda expression by calculating in C# instead
                                                var topExpense = GetTopExpense(vendor.TransactionsByType);
                                            }
                                            @(topExpense != null ? $"{topExpense.TransactionTypeDisplayName} ({topExpense.TotalAmount:C})" : "N/A")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Expense Distribution -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Expense Distribution</h5>
                </div>
                <div class="card-body">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Expense Type</th>
                                <th>Count</th>
                                <th class="text-end">Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var expense in ViewBag.SpendByType)
                            {
                                <tr>
                                    <td>@expense.TransactionTypeDisplayName</td>
                                    <td>@expense.Count</td>
                                    <td class="text-end">@expense.TotalAmount.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr class="fw-bold">
                                <td>Total</td>
                                <td>@totalTransactions</td>
                                <td class="text-end">@totalSpend.ToString("C")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        $(document).ready(function() {
            // Prepare data for Monthly Spending Chart
            @{
                var monthYears = "";
                var monthlyTotals = "";
                var categoryNames = "";
                var categoryTotals = "";
                var vendorNames = "";
                var vendorTotals = "";
                var vehicleNames = "";
                var maintenanceTotals = "";
                var repairTotals = "";
                var partsTotals = "";
                var fuelTotals = "";
                
                if (ViewBag.MonthlySpend != null)
                {
                    var monthsList = new List<string>();
                    var totalsLists = new List<string>();
                    
                    foreach (var m in ViewBag.MonthlySpend)
                    {
                        monthsList.Add($"'{m.MonthYear}'");
                        totalsLists.Add(m.TotalAmount.ToString());
                    }
                    
                    monthYears = string.Join(",", monthsList);
                    monthlyTotals = string.Join(",", totalsLists);
                }
                
                if (ViewBag.SpendByType != null)
                {
                    var categoriesList = new List<string>();
                    var totalsList = new List<string>();
                    
                    foreach (var s in ViewBag.SpendByType)
                    {
                        categoriesList.Add($"'{s.TransactionTypeDisplayName}'");
                        totalsList.Add(s.TotalAmount.ToString());
                    }
                    
                    categoryNames = string.Join(",", categoriesList);
                    categoryTotals = string.Join(",", totalsList);
                }
                
                if (ViewBag.VendorAnalysis != null)
                {
                    var vendorsList = new List<string>();
                    var totalsList = new List<string>();
                    
                    // Get top 5 vendors by spend using C# variables instead of lambda in JavaScript
                    var top5Vendors = new List<dynamic>();
                    var vendorList = new List<dynamic>(ViewBag.VendorAnalysis);
                    vendorList.Sort((a, b) => ((decimal)b.TotalSpent).CompareTo((decimal)a.TotalSpent));
                    
                    for (int i = 0; i < Math.Min(5, vendorList.Count); i++)
                    {
                        top5Vendors.Add(vendorList[i]);
                    }
                    
                    foreach (var v in top5Vendors)
                    {
                        vendorsList.Add($"'{v.VendorName}'");
                        totalsList.Add(v.TotalSpent.ToString());
                    }
                    
                    vendorNames = string.Join(",", vendorsList);
                    vendorTotals = string.Join(",", totalsList);
                }
                
                if (ViewBag.VehicleAnalysis != null)
                {
                    var vehiclesList = new List<string>();
                    var mTotalsList = new List<string>();
                    var rTotalsList = new List<string>();
                    var pTotalsList = new List<string>();
                    var fTotalsList = new List<string>();
                    
                    // Get top 10 vehicles by spend using C# variables
                    var vehicleData = new List<dynamic>();
                    var vehicleList = new List<dynamic>(ViewBag.VehicleAnalysis);
                    vehicleList.Sort((a, b) => ((decimal)b.TotalSpent).CompareTo((decimal)a.TotalSpent));
                    
                    for (int i = 0; i < Math.Min(10, vehicleList.Count); i++)
                    {
                        vehicleData.Add(vehicleList[i]);
                    }
                    
                    foreach (var v in vehicleData)
                    {
                        vehiclesList.Add($"'{v.VehicleName}'");
                        
                        // Find transactions by type without using lambdas directly in JS
                        var transactionList = new List<dynamic>(v.TransactionsByType);
                        dynamic maintenance = null, repair = null, parts = null, fuel = null;
                        
                        foreach (var t in transactionList)
                        {
                            if (t.TransactionType == "maintenance") maintenance = t;
                            if (t.TransactionType == "repair") repair = t;
                            if (t.TransactionType == "parts") parts = t;
                            if (t.TransactionType == "fuel") fuel = t;
                        }
                        
                        mTotalsList.Add(maintenance != null ? maintenance.TotalAmount.ToString() : "0");
                        rTotalsList.Add(repair != null ? repair.TotalAmount.ToString() : "0");
                        pTotalsList.Add(parts != null ? parts.TotalAmount.ToString() : "0");
                        fTotalsList.Add(fuel != null ? fuel.TotalAmount.ToString() : "0");
                    }
                    
                    vehicleNames = string.Join(",", vehiclesList);
                    maintenanceTotals = string.Join(",", mTotalsList);
                    repairTotals = string.Join(",", rTotalsList);
                    partsTotals = string.Join(",", pTotalsList);
                    fuelTotals = string.Join(",", fTotalsList);
                }
            }
            
            var months = [@Html.Raw(monthYears)];
            var monthlyAmounts = [@Html.Raw(monthlyTotals)];
            
            // Monthly Spending Chart
            var monthlyCtx = document.getElementById('monthlySpendingChart').getContext('2d');
            var monthlyChart = new Chart(monthlyCtx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Monthly Spend',
                        data: monthlyAmounts,
                        fill: true,
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: @Html.Raw(tickCallbackCode)
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: @Html.Raw(tooltipCallbackCode)
                            }
                        }
                    }
                }
            });
            
            // Prepare data for Spending by Category Chart
            var categories = [@Html.Raw(categoryNames)];
            var categoryAmounts = [@Html.Raw(categoryTotals)];
            var backgroundColors = [
                'rgba(13, 110, 253, 0.7)',
                'rgba(25, 135, 84, 0.7)',
                'rgba(220, 53, 69, 0.7)',
                'rgba(255, 193, 7, 0.7)',
                'rgba(13, 202, 240, 0.7)',
                'rgba(111, 66, 193, 0.7)',
                'rgba(102, 16, 242, 0.7)'
            ];
            
            // Spending by Category Chart
            var categoryCtx = document.getElementById('spendingByCategoryChart').getContext('2d');
            var categoryChart = new Chart(categoryCtx, {
                type: 'doughnut',
                data: {
                    labels: categories,
                    datasets: [{
                        data: categoryAmounts,
                        backgroundColor: backgroundColors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: @Html.Raw(doughnutTooltipCallbackCode)
                            }
                        }
                    }
                }
            });
            
            // Prepare data for Top Vendors Chart
            var vendors = [@Html.Raw(vendorNames)];
            var vendorAmounts = [@Html.Raw(vendorTotals)];
            
            // Top Vendors Chart
            var vendorCtx = document.getElementById('topVendorsChart').getContext('2d');
            var vendorChart = new Chart(vendorCtx, {
                type: 'bar',
                data: {
                    labels: vendors,
                    datasets: [{
                        label: 'Total Spend',
                        data: vendorAmounts,
                        backgroundColor: 'rgba(13, 110, 253, 0.7)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    scales: {
                        x: {
                            beginAtZero: true,
                            ticks: {
                                callback: @Html.Raw(tickCallbackCode)
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: @Html.Raw(barTooltipCallbackCode)
                            }
                        }
                    }
                }
            });
            
            // Prepare data for Vehicle Cost Chart
            var vehicles = [@Html.Raw(vehicleNames)];
            var maintenanceAmounts = [@Html.Raw(maintenanceTotals)];
            var repairAmounts = [@Html.Raw(repairTotals)];
            var partsAmounts = [@Html.Raw(partsTotals)];
            var fuelAmounts = [@Html.Raw(fuelTotals)];
            
            // Vehicle Cost Chart
            var vehicleCtx = document.getElementById('vehicleCostChart').getContext('2d');
            var vehicleChart = new Chart(vehicleCtx, {
                type: 'bar',
                data: {
                    labels: vehicles,
                    datasets: [
                        {
                            label: 'Maintenance',
                            data: maintenanceAmounts,
                            backgroundColor: 'rgba(13, 110, 253, 0.7)'
                        },
                        {
                            label: 'Repairs',
                            data: repairAmounts,
                            backgroundColor: 'rgba(220, 53, 69, 0.7)'
                        },
                        {
                            label: 'Parts',
                            data: partsAmounts,
                            backgroundColor: 'rgba(25, 135, 84, 0.7)'
                        },
                        {
                            label: 'Fuel',
                            data: fuelAmounts,
                            backgroundColor: 'rgba(255, 193, 7, 0.7)'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            stacked: true
                        },
                        y: {
                            stacked: true,
                            ticks: {
                                callback: @Html.Raw(tickCallbackCode)
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: @Html.Raw(stackedBarTooltipCallbackCode)
                            }
                        }
                    }
                }
            });
        });
    </script>
}

@functions {
    dynamic GetTopExpenseType(dynamic spendByType)
    {
        dynamic result = null;
        decimal maxAmount = 0;
        
        foreach (var item in spendByType)
        {
            if (item.TotalAmount > maxAmount)
            {
                maxAmount = item.TotalAmount;
                result = item;
            }
        }
        
        return result;
    }
    
    dynamic GetTopVendor(dynamic vendorAnalysis)
    {
        dynamic result = null;
        decimal maxAmount = 0;
        
        foreach (var item in vendorAnalysis)
        {
            if (item.TotalSpent > maxAmount)
            {
                maxAmount = item.TotalSpent;
                result = item;
            }
        }
        
        return result;
    }
    
    dynamic GetTopExpense(dynamic transactionsByType)
    {
        dynamic result = null;
        decimal maxAmount = 0;
        
        foreach (var item in transactionsByType)
        {
            if (item.TotalAmount > maxAmount)
            {
                maxAmount = item.TotalAmount;
                result = item;
            }
        }
        
        return result;
    }
} 