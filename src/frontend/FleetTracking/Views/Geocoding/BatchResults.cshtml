@model IEnumerable<FleetTracking.Models.GeocodingResult>

@{
    ViewData["Title"] = "Batch Geocoding Results";
}

<div class="container-fluid px-4 py-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="display-6 mb-0">Batch Results</h1>
            <p class="text-muted">Geocoding results for your batch request</p>
        </div>
        <div class="col-md-6 text-end">
            <a asp-action="Batch" class="btn btn-outline-secondary me-2">
                <i class="bi bi-arrow-left"></i> Back to Batch
            </a>
            <a asp-action="Index" class="btn btn-outline-primary">
                <i class="bi bi-house"></i> Geocoding Home
            </a>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Results</h5>
            <div>
                <button class="btn btn-sm btn-outline-secondary" id="exportCSVBtn">
                    <i class="bi bi-filetype-csv"></i> Export CSV
                </button>
                <button class="btn btn-sm btn-outline-secondary ms-2" id="exportJSONBtn">
                    <i class="bi bi-filetype-json"></i> Export JSON
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-sm table-striped table-hover" id="resultsTable">
                    <thead>
                        <tr>
                            <th>Address</th>
                            <th>Formatted Address</th>
                            <th>Latitude</th>
                            <th>Longitude</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var result in Model)
                            {
                                <tr>
                                    <td>@result.OriginalQuery</td>
                                    <td>@result.FormattedAddress</td>
                                    <td>@result.Latitude.ToString("F6")</td>
                                    <td>@result.Longitude.ToString("F6")</td>
                                    <td>
                                        @if (result.Status == "success")
                                        {
                                            <span class="badge bg-success">Success</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Failed</span>
                                        }
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-primary view-on-map"
                                                data-lat="@result.Latitude" data-lng="@result.Longitude"
                                                data-address="@result.FormattedAddress">
                                            <i class="bi bi-map"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-success save-location"
                                                data-lat="@result.Latitude" data-lng="@result.Longitude"
                                                data-address="@result.FormattedAddress">
                                            <i class="bi bi-bookmark-plus"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-4">No results found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-white py-3">
            <h5 class="mb-0">Map View</h5>
        </div>
        <div class="card-body p-0">
            <div id="resultsMap" style="height: 400px; width: 100%;"></div>
        </div>
    </div>
</div>

<!-- Save Location Modal -->
<div class="modal fade" id="saveLocationModal" tabindex="-1" aria-labelledby="saveLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveLocationModalLabel">Save Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="saveLocationForm">
                    <input type="hidden" id="locationLatitude" name="latitude">
                    <input type="hidden" id="locationLongitude" name="longitude">
                    <input type="hidden" id="locationAddress" name="address">
                    
                    <div class="mb-3">
                        <label for="locationName" class="form-label">Location Name</label>
                        <input type="text" class="form-control" id="locationName" required>
                    </div>
                    <div class="mb-3">
                        <label for="locationType" class="form-label">Location Type</label>
                        <select class="form-select" id="locationType">
                            <option value="customer">Customer</option>
                            <option value="warehouse">Warehouse</option>
                            <option value="office">Office</option>
                            <option value="rest_area">Rest Area</option>
                            <option value="service_center">Service Center</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="locationNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="locationNotes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveLocationBtn">Save Location</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <style>
        #resultsMap {
            z-index: 0;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize map
            const map = L.map('resultsMap').setView([34.0522, -118.2437], 2);
            
            // Add OSM tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            // Store results for export
            window.batchResults = @Html.Raw(Json.Serialize(Model));
            
            // Add markers for all valid results
            const markers = [];
            
            if (window.batchResults && window.batchResults.length > 0) {
                window.batchResults.forEach(function(result) {
                    if (result.latitude && result.longitude) {
                        const marker = L.marker([result.latitude, result.longitude])
                            .bindPopup(`<strong>${result.formattedAddress}</strong><br>Lat: ${result.latitude.toFixed(6)}, Lng: ${result.longitude.toFixed(6)}`)
                            .addTo(map);
                        
                        markers.push(marker);
                    }
                });
                
                // Fit map to markers
                if (markers.length > 0) {
                    const group = new L.featureGroup(markers);
                    map.fitBounds(group.getBounds().pad(0.1));
                }
            }
            
            // View on map button click
            $('.view-on-map').click(function() {
                const lat = $(this).data('lat');
                const lng = $(this).data('lng');
                const address = $(this).data('address');
                
                if (lat && lng) {
                    map.setView([lat, lng], 15);
                    
                    // Find and open popup for this marker
                    markers.forEach(function(marker) {
                        const markerLatLng = marker.getLatLng();
                        if (markerLatLng.lat === lat && markerLatLng.lng === lng) {
                            marker.openPopup();
                        }
                    });
                }
            });
            
            // Save location button click
            $('.save-location').click(function() {
                const lat = $(this).data('lat');
                const lng = $(this).data('lng');
                const address = $(this).data('address');
                
                // Set values in modal
                $('#locationLatitude').val(lat);
                $('#locationLongitude').val(lng);
                $('#locationAddress').val(address);
                
                // Suggest a name based on the address
                const nameSuggestion = address.split(',')[0];
                $('#locationName').val(nameSuggestion);
                
                // Show modal
                $('#saveLocationModal').modal('show');
            });
            
            // Save location form submission
            $('#saveLocationBtn').click(function() {
                const lat = $('#locationLatitude').val();
                const lng = $('#locationLongitude').val();
                const address = $('#locationAddress').val();
                const name = $('#locationName').val();
                const type = $('#locationType').val();
                const notes = $('#locationNotes').val();
                
                if (!name) {
                    alert('Please enter a name for this location');
                    return;
                }
                
                // Create saved location object
                const savedLocation = {
                    name: name,
                    latitude: parseFloat(lat),
                    longitude: parseFloat(lng),
                    address: address,
                    type: type,
                    notes: notes,
                    isActive: true
                };
                
                // Call API to save location
                $.ajax({
                    url: '/Geocoding/CreateLocation',
                    type: 'POST',
                    data: savedLocation,
                    success: function(response) {
                        // Close modal
                        $('#saveLocationModal').modal('hide');
                        
                        // Show success message
                        toastr.success('Location saved successfully');
                        
                        // Reset form
                        $('#saveLocationForm')[0].reset();
                    },
                    error: function(error) {
                        toastr.error('Error saving location');
                    }
                });
            });
            
            // Export to CSV
            $('#exportCSVBtn').click(function() {
                if (!window.batchResults || window.batchResults.length === 0) {
                    return;
                }
                
                let csv = 'Original Query,Formatted Address,Latitude,Longitude,Status\n';
                
                window.batchResults.forEach(function(result) {
                    // Escape CSV values properly
                    const escapeCsv = (value) => {
                        if (value === null || value === undefined) return '';
                        const str = String(value);
                        if (str.includes(',') || str.includes('"') || str.includes('\n')) {
                            return '"' + str.replace(/"/g, '""') + '"';
                        }
                        return str;
                    };
                    
                    csv += `${escapeCsv(result.originalQuery)},${escapeCsv(result.formattedAddress)},`;
                    csv += `${escapeCsv(result.latitude)},${escapeCsv(result.longitude)},${escapeCsv(result.status)}\n`;
                });
                
                // Create download
                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'geocoding_results_' + new Date().toISOString().slice(0, 10) + '.csv';
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
            
            // Export to JSON
            $('#exportJSONBtn').click(function() {
                if (!window.batchResults || window.batchResults.length === 0) {
                    return;
                }
                
                // Create download
                const blob = new Blob([JSON.stringify(window.batchResults, null, 2)], { type: 'application/json;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'geocoding_results_' + new Date().toISOString().slice(0, 10) + '.json';
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
        });
    </script>
} 