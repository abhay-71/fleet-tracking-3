@{
    ViewData["Title"] = "Trip Route";
    var trip = ViewData["Trip"] as FleetTracking.Models.Trip;
    var vehicle = ViewData["Vehicle"] as FleetTracking.Models.Vehicle;
}

<div class="container-fluid px-4 py-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6 mb-0">Trip Route</h1>
            <p class="text-muted">
                <span class="me-3">@vehicle.Make @vehicle.Model (@vehicle.RegistrationNumber)</span>
                <span class="me-3">|</span>
                <span>@trip.StartDate.ToString("MMM dd, yyyy")</span>
            </p>
        </div>
        <div class="col-md-4 text-end">
            <div class="btn-group" role="group">
                <a asp-action="Vehicle" asp-route-id="@vehicle.Id" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Back to Vehicle
                </a>
                <button id="exportTripBtn" class="btn btn-outline-success">
                    <i class="bi bi-download"></i> Export Trip
                </button>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Trip Details</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-5">Start Date/Time</dt>
                        <dd class="col-sm-7">@trip.StartDate.ToString("MMM dd, yyyy HH:mm")</dd>

                        <dt class="col-sm-5">End Date/Time</dt>
                        <dd class="col-sm-7">@trip.EndDate.ToString("MMM dd, yyyy HH:mm")</dd>

                        <dt class="col-sm-5">Duration</dt>
                        <dd class="col-sm-7">@((trip.EndDate - trip.StartDate).ToString(@"hh\:mm\:ss"))</dd>

                        <dt class="col-sm-5">Start Location</dt>
                        <dd class="col-sm-7">@trip.StartLocation</dd>

                        <dt class="col-sm-5">End Location</dt>
                        <dd class="col-sm-7">@trip.EndLocation</dd>

                        <dt class="col-sm-5">Distance</dt>
                        <dd class="col-sm-7">@trip.Distance.ToString("F1") km</dd>

                        <dt class="col-sm-5">Avg. Speed</dt>
                        <dd class="col-sm-7">@trip.AverageSpeed.ToString("F1") km/h</dd>

                        <dt class="col-sm-5">Max. Speed</dt>
                        <dd class="col-sm-7">@trip.MaxSpeed.ToString("F1") km/h</dd>

                        <dt class="col-sm-5">Fuel Consumed</dt>
                        <dd class="col-sm-7">@trip.FuelConsumed.ToString("F1") L</dd>
                    </dl>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Vehicle Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-5">Registration</dt>
                        <dd class="col-sm-7">@vehicle.RegistrationNumber</dd>

                        <dt class="col-sm-5">Make/Model</dt>
                        <dd class="col-sm-7">@vehicle.Make @vehicle.Model</dd>

                        <dt class="col-sm-5">Year</dt>
                        <dd class="col-sm-7">@vehicle.Year</dd>

                        <dt class="col-sm-5">Driver</dt>
                        <dd class="col-sm-7">@(trip.DriverName ?? "Not specified")</dd>
                    </dl>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Trip Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light">
                                <div class="card-body text-center py-3">
                                    <h6 class="text-muted mb-2">Stops</h6>
                                    <h3 class="mb-0">@trip.StopCount</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light">
                                <div class="card-body text-center py-3">
                                    <h6 class="text-muted mb-2">Idle Time</h6>
                                    <h3 class="mb-0">@trip.IdleTime.ToString(@"hh\:mm")</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light">
                                <div class="card-body text-center py-3">
                                    <h6 class="text-muted mb-2">Geofences</h6>
                                    <h3 class="mb-0">@trip.GeofenceEvents</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card bg-light">
                                <div class="card-body text-center py-3">
                                    <h6 class="text-muted mb-2">Fuel Economy</h6>
                                    <h3 class="mb-0">@((trip.Distance / trip.FuelConsumed).ToString("F1")) km/L</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Route Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="tripMap" style="height: 600px; width: 100%;"></div>
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Waypoints</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="waypointsTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Time</th>
                                    <th>Location</th>
                                    <th>Speed</th>
                                    <th>Event</th>
                                    <th>Fuel Level</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Loading placeholder - will be replaced by actual data -->
                                <tr>
                                    <td colspan="6" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2">Loading waypoints...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportTripModal" tabindex="-1" aria-labelledby="exportTripModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportTripModalLabel">Export Trip Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="exportTripForm">
                    <div class="mb-3">
                        <label class="form-label">Export Format</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="exportFormat" id="formatCSV" value="csv" checked>
                            <label class="form-check-label" for="formatCSV">
                                CSV
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="exportFormat" id="formatGPX" value="gpx">
                            <label class="form-check-label" for="formatGPX">
                                GPX (for GPS devices)
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Include Data</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="location" id="includeLocation" checked>
                            <label class="form-check-label" for="includeLocation">
                                Location Data
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="speed" id="includeSpeed" checked>
                            <label class="form-check-label" for="includeSpeed">
                                Speed Data
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="fuel" id="includeFuel" checked>
                            <label class="form-check-label" for="includeFuel">
                                Fuel Data
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="events" id="includeEvents" checked>
                            <label class="form-check-label" for="includeEvents">
                                Event Data
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmExportTripBtn">Export</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <style>
        #tripMap {
            z-index: 0;
        }
        .trip-polyline {
            stroke-width: 3;
        }
        .event-marker {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
        .speed-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script>
        $(document).ready(function () {
            const tripId = @trip.Id;
            let waypoints = [];
            let map;
            let routeLayer;

            // Initialize map
            function initMap() {
                map = L.map('tripMap').setView([34.0522, -118.2437], 10);
                
                // Add tile layer
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
                
                // Create a layer group for routes
                routeLayer = L.layerGroup().addTo(map);
            }

            // Load waypoint data
            function loadWaypoints() {
                const url = `/VehicleHistory/GetTripWaypoints/${tripId}`;
                
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function(data) {
                        waypoints = data;
                        updateMapVisualization();
                        updateWaypointsTable();
                    },
                    error: function(error) {
                        console.error('Error loading waypoints:', error);
                        alert('Failed to load trip waypoints. Please try again later.');
                    }
                });
            }

            // Update map visualization
            function updateMapVisualization() {
                // Clear previous routes
                routeLayer.clearLayers();
                
                if (waypoints.length === 0) {
                    // No data to display
                    return;
                }
                
                // Extract coordinates for route
                const coordinates = waypoints.map(point => [point.latitude, point.longitude]);
                
                // Create polyline for the route
                const routePath = L.polyline(coordinates, {
                    color: '#3388ff',
                    weight: 4,
                    opacity: 0.7,
                    className: 'trip-polyline'
                }).addTo(routeLayer);
                
                // Add markers for start and end points
                const startPoint = coordinates[0];
                const endPoint = coordinates[coordinates.length - 1];
                
                const startMarker = L.marker(startPoint, {
                    title: 'Start',
                    icon: L.divIcon({
                        className: 'start-marker',
                        html: '<i class="bi bi-flag-fill text-success" style="font-size: 24px;"></i>',
                        iconSize: [24, 24],
                        iconAnchor: [12, 24]
                    })
                }).bindPopup(`
                    <strong>Trip Start</strong><br>
                    Time: ${new Date(waypoints[0].timestamp).toLocaleString()}<br>
                    Location: ${waypoints[0].location || 'Unknown'}
                `).addTo(routeLayer);
                
                const endMarker = L.marker(endPoint, {
                    title: 'End',
                    icon: L.divIcon({
                        className: 'end-marker',
                        html: '<i class="bi bi-flag-checkered-fill text-danger" style="font-size: 24px;"></i>',
                        iconSize: [24, 24],
                        iconAnchor: [12, 24]
                    })
                }).bindPopup(`
                    <strong>Trip End</strong><br>
                    Time: ${new Date(waypoints[waypoints.length - 1].timestamp).toLocaleString()}<br>
                    Location: ${waypoints[waypoints.length - 1].location || 'Unknown'}
                `).addTo(routeLayer);
                
                // Add markers for events (stops, speedingm, geofence, etc.)
                waypoints.forEach((point, index) => {
                    // Skip the first and last points (already have markers)
                    if (index === 0 || index === waypoints.length - 1) {
                        return;
                    }
                    
                    // Check if there is an event
                    if (point.event) {
                        let markerColor = '#9e9e9e'; // Default color
                        let eventIcon = '';
                        
                        // Determine color and icon based on event type
                        if (point.event.toLowerCase().includes('stop')) {
                            markerColor = '#f44336'; // Red for stops
                            eventIcon = '<i class="bi bi-sign-stop-fill"></i>';
                        } else if (point.event.toLowerCase().includes('speed')) {
                            markerColor = '#ff9800'; // Orange for speeding
                            eventIcon = '<i class="bi bi-speedometer2"></i>';
                        } else if (point.event.toLowerCase().includes('geofence')) {
                            markerColor = '#8bc34a'; // Green for geofence
                            eventIcon = '<i class="bi bi-geo-alt-fill"></i>';
                        } else if (point.event.toLowerCase().includes('idle')) {
                            markerColor = '#9c27b0'; // Purple for idle
                            eventIcon = '<i class="bi bi-hourglass-split"></i>';
                        }
                        
                        L.circleMarker([point.latitude, point.longitude], {
                            radius: 6,
                            color: markerColor,
                            fillOpacity: 0.8
                        }).bindPopup(`
                            <strong>${point.event}</strong><br>
                            Time: ${new Date(point.timestamp).toLocaleString()}<br>
                            Location: ${point.location || 'Unknown'}<br>
                            Speed: ${point.speed.toFixed(1)} km/h
                        `).addTo(routeLayer);
                    }
                    
                    // Add markers for high speeds even if no specific event
                    else if (point.speed > 80) {
                        L.circleMarker([point.latitude, point.longitude], {
                            radius: 4,
                            color: '#ff9800',
                            fillOpacity: 0.5
                        }).bindPopup(`
                            <strong>High Speed</strong><br>
                            Time: ${new Date(point.timestamp).toLocaleString()}<br>
                            Speed: ${point.speed.toFixed(1)} km/h
                        `).addTo(routeLayer);
                    }
                });
                
                // Fit map to show the route
                map.fitBounds(routePath.getBounds());
            }

            // Update waypoints table
            function updateWaypointsTable() {
                if (waypoints.length === 0) {
                    $('#waypointsTable tbody').html(`
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <p class="text-muted">No waypoints data found for this trip</p>
                            </td>
                        </tr>
                    `);
                    return;
                }
                
                let tableRows = '';
                
                waypoints.forEach((point, index) => {
                    // Determine speed color
                    let speedColor = '#4caf50'; // green for normal
                    if (point.speed > 80) {
                        speedColor = '#ff9800'; // orange for high
                    } else if (point.speed < 2) {
                        speedColor = '#9e9e9e'; // gray for stopped
                    }
                    
                    // Determine event badge color
                    let eventClass = 'bg-secondary';
                    if (point.event) {
                        const event = point.event.toLowerCase();
                        if (event.includes('stop')) {
                            eventClass = 'bg-danger';
                        } else if (event.includes('speed')) {
                            eventClass = 'bg-warning text-dark';
                        } else if (event.includes('geofence')) {
                            eventClass = 'bg-success';
                        } else if (event.includes('idle')) {
                            eventClass = 'bg-info text-dark';
                        }
                    }
                    
                    tableRows += `
                        <tr>
                            <td>${new Date(point.timestamp).toLocaleString()}</td>
                            <td>${point.location || `${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)}`}</td>
                            <td>
                                <span class="speed-indicator" style="background-color: ${speedColor}"></span>
                                ${point.speed.toFixed(1)} km/h
                            </td>
                            <td>
                                ${point.event ? `<span class="badge ${eventClass}">${point.event}</span>` : ''}
                            </td>
                            <td>${point.fuelLevel.toFixed(1)}%</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary show-on-map" data-index="${index}">
                                    <i class="bi bi-map"></i> Show
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                $('#waypointsTable tbody').html(tableRows);
                
                // Add click handler for "Show on Map" buttons
                $('.show-on-map').click(function() {
                    const index = $(this).data('index');
                    const point = waypoints[index];
                    
                    // Create a temporary marker
                    const tmpMarker = L.marker([point.latitude, point.longitude], {
                        icon: L.divIcon({
                            className: 'temp-marker',
                            html: '<i class="bi bi-geo-alt-fill text-primary" style="font-size: 24px;"></i>',
                            iconSize: [24, 24],
                            iconAnchor: [12, 24]
                        })
                    }).addTo(map);
                    
                    // Center map on this point
                    map.setView([point.latitude, point.longitude], 15);
                    
                    // Show a popup
                    const popup = L.popup()
                        .setLatLng([point.latitude, point.longitude])
                        .setContent(`
                            <strong>Waypoint Details</strong><br>
                            Time: ${new Date(point.timestamp).toLocaleString()}<br>
                            Location: ${point.location || 'Unknown'}<br>
                            Speed: ${point.speed.toFixed(1)} km/h<br>
                            ${point.event ? 'Event: ' + point.event + '<br>' : ''}
                            Fuel Level: ${point.fuelLevel.toFixed(1)}%
                        `)
                        .openOn(map);
                    
                    // Remove the marker after 3 seconds
                    setTimeout(function() {
                        map.removeLayer(tmpMarker);
                    }, 3000);
                });
            }

            // Handle export button click
            $('#exportTripBtn').click(function() {
                // Show export modal
                $('#exportTripModal').modal('show');
            });

            // Handle export confirmation
            $('#confirmExportTripBtn').click(function() {
                const format = $('input[name="exportFormat"]:checked').val();
                
                // Build includes array from checked boxes
                const includes = [];
                $('input[type="checkbox"]:checked').each(function() {
                    includes.push($(this).val());
                });
                
                // Redirect to export endpoint (this would be implemented in a real application)
                alert('Export functionality would be implemented in a real application. Format: ' + format);
                
                // Close modal
                $('#exportTripModal').modal('hide');
            });

            // Initialize the page
            initMap();
            loadWaypoints();
        });
    </script>
} 