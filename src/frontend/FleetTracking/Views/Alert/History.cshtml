@model IEnumerable<FleetTracking.Models.AlertLog>

@{
    ViewData["Title"] = "Alert History";
}

<div class="container-fluid px-4 py-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="display-6 mb-0">Alert History</h1>
            <p class="text-muted">View and manage historical alerts</p>
        </div>
        <div class="col-md-6 text-end">
            <a asp-action="Index" class="btn btn-outline-secondary me-2">
                <i class="bi bi-list"></i> Alert List
            </a>
            <a asp-action="Map" class="btn btn-outline-primary me-2">
                <i class="bi bi-map"></i> Alert Map
            </a>
            <a asp-action="Create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Create New Alert
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-white py-3">
            <div class="row">
                <div class="col-md-5">
                    <h5 class="mb-0">Alert Log</h5>
                </div>
                <div class="col-md-7">
                    <div class="row">
                        <div class="col-md-4">
                            <select class="form-select form-select-sm" id="filterStatus">
                                <option value="all">All Status</option>
                                <option value="pending">Pending</option>
                                <option value="acknowledged">Acknowledged</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select class="form-select form-select-sm" id="filterSeverity">
                                <option value="all">All Severity</option>
                                <option value="low">Low</option>
                                <option value="medium">Medium</option>
                                <option value="high">High</option>
                                <option value="critical">Critical</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group input-group-sm">
                                <input type="text" id="searchAlert" class="form-control" placeholder="Search alerts...">
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Alert</th>
                            <th>Type</th>
                            <th>Severity</th>
                            <th>Time</th>
                            <th>Details</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Any())
                        {
                            @foreach (var item in Model)
                            {
                                <tr class="alert-row @(item.Acknowledged ? "acknowledged" : "pending")" data-severity="@item.Severity">
                                    <td>@item.AlertName</td>
                                    <td>@item.AlertType.Replace("_", " ").ToUpperInvariant()</td>
                                    <td>
                                        <span class="badge @item.SeverityBadgeClass">@item.Severity.ToUpperInvariant()</span>
                                    </td>
                                    <td>@item.Timestamp.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>
                                        <span class="d-inline-block text-truncate" style="max-width: 200px;">
                                            @item.Details
                                        </span>
                                    </td>
                                    <td>
                                        @if (item.Acknowledged)
                                        {
                                            <span class="badge bg-success">Acknowledged</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Pending</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Alert actions">
                                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-info-circle"></i>
                                            </a>
                                            @if (!item.Acknowledged)
                                            {
                                                <a asp-action="Acknowledge" asp-route-id="@item.Id" class="btn btn-sm btn-outline-success">
                                                    <i class="bi bi-check-circle"></i>
                                                </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <i class="bi bi-clock-history text-muted" style="font-size: 3rem;"></i>
                                        <h5 class="mt-3">No alert history found</h5>
                                        <p class="text-muted">Alert history will appear here once alerts are triggered</p>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer bg-white py-3">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <small class="text-muted">Showing @Model.Count() alerts</small>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-outline-primary btn-sm" id="exportAlertHistory">
                        <i class="bi bi-download"></i> Export History
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Table filtering functionality
            function filterTable() {
                const statusFilter = $('#filterStatus').val();
                const severityFilter = $('#filterSeverity').val();
                const searchText = $('#searchAlert').val().toLowerCase();
                
                $('.alert-row').each(function() {
                    let showRow = true;
                    
                    // Apply status filter
                    if (statusFilter !== 'all') {
                        if ($(this).hasClass(statusFilter) === false) {
                            showRow = false;
                        }
                    }
                    
                    // Apply severity filter
                    if (severityFilter !== 'all') {
                        if ($(this).data('severity') !== severityFilter) {
                            showRow = false;
                        }
                    }
                    
                    // Apply search text
                    if (searchText) {
                        if ($(this).text().toLowerCase().indexOf(searchText) === -1) {
                            showRow = false;
                        }
                    }
                    
                    // Show/hide row
                    $(this).toggle(showRow);
                });
            }
            
            // Event handlers for filters
            $('#filterStatus, #filterSeverity').change(filterTable);
            $('#searchAlert').on('keyup', filterTable);
            
            // Export functionality
            $('#exportAlertHistory').click(function() {
                // Get table HTML
                const tableHtml = $('table').clone();
                
                // Remove action buttons
                tableHtml.find('a').each(function() {
                    $(this).replaceWith($(this).find('i').attr('title'));
                });
                
                // Convert to CSV
                let csv = [];
                let rows = tableHtml.find('tr');
                
                for (let i = 0; i < rows.length; i++) {
                    let row = [], cols = $(rows[i]).find('td, th');
                    
                    for (let j = 0; j < cols.length; j++) {
                        // Get text content, removing extra whitespace
                        let text = $(cols[j]).text().trim().replace(/\s+/g, ' ');
                        
                        // Escape quotes in the text
                        text = text.replace(/"/g, '""');
                        
                        // Add quotes around the text
                        row.push('"' + text + '"');
                    }
                    
                    csv.push(row.join(','));
                }
                
                // Download the CSV file
                const csvString = csv.join('\n');
                const filename = 'alert_history_' + new Date().toISOString().slice(0, 10) + '.csv';
                
                const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                
                // Create download link
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = filename;
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
        });
    </script>
} 