@{
    ViewData["Title"] = "Alert Map";
}

<div class="container-fluid px-4 py-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="display-6 mb-0">Alert Map</h1>
            <p class="text-muted">Visualize location-based alerts and notifications</p>
        </div>
        <div class="col-md-6 text-end">
            <a asp-action="Index" class="btn btn-outline-secondary me-2">
                <i class="bi bi-list"></i> Alert List
            </a>
            <a asp-action="History" class="btn btn-outline-primary me-2">
                <i class="bi bi-clock-history"></i> Alert History
            </a>
            <a asp-action="Create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Create New Alert
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-9">
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-white py-3">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="mb-0">Alert Visualization</h5>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-outline-secondary active" id="defaultMapBtn">Default</button>
                                    <button type="button" class="btn btn-outline-secondary" id="satelliteMapBtn">Satellite</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="alertMap" style="height: 70vh; width: 100%;"></div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Active Alerts</h5>
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Search alerts..." id="searchAlert">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                    <div class="list-group alert-list" id="alertList">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading alerts...</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Filter Alerts</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Alert Type</label>
                        <select class="form-select" id="filterAlertType">
                            <option value="all">All Types</option>
                            <option value="geofence_entry">Geofence Entry</option>
                            <option value="geofence_exit">Geofence Exit</option>
                            <option value="speed">Speed Alert</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Severity</label>
                        <div class="d-flex flex-wrap gap-2">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input filter-severity" type="checkbox" value="low" id="severity_low" checked>
                                <label class="form-check-label" for="severity_low">
                                    <span class="badge bg-info">Low</span>
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input filter-severity" type="checkbox" value="medium" id="severity_medium" checked>
                                <label class="form-check-label" for="severity_medium">
                                    <span class="badge bg-warning">Medium</span>
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input filter-severity" type="checkbox" value="high" id="severity_high" checked>
                                <label class="form-check-label" for="severity_high">
                                    <span class="badge bg-danger">High</span>
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input filter-severity" type="checkbox" value="critical" id="severity_critical" checked>
                                <label class="form-check-label" for="severity_critical">
                                    <span class="badge bg-danger text-white">Critical</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Time Period</label>
                        <select class="form-select" id="filterTimePeriod">
                            <option value="24">Last 24 Hours</option>
                            <option value="48">Last 48 Hours</option>
                            <option value="72">Last 72 Hours</option>
                            <option value="168">Last Week</option>
                        </select>
                    </div>
                    <div class="d-grid">
                        <button type="button" class="btn btn-primary" id="applyFilters">
                            <i class="bi bi-funnel"></i> Apply Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Details Modal -->
<div class="modal fade" id="alertDetailsModal" tabindex="-1" aria-labelledby="alertDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertDetailsModalLabel">Alert Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert-details-content">
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading details...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a href="#" class="btn btn-primary d-none" id="acknowledgeAlertBtn">Acknowledge</a>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <style>
        #alertMap {
            z-index: 0;
        }
        .alert-list {
            max-height: 300px;
            overflow-y: auto;
        }
        .alert-list-item {
            cursor: pointer;
        }
        .alert-icon {
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            margin-right: 8px;
        }
        .alert-icon.low {
            background-color: #0dcaf0;
            color: white;
        }
        .alert-icon.medium {
            background-color: #ffc107;
            color: black;
        }
        .alert-icon.high {
            background-color: #dc3545;
            color: white;
        }
        .alert-icon.critical {
            background-color: #dc3545;
            color: white;
            border: 2px solid white;
            box-shadow: 0 0 0 1px #dc3545;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script>
        $(document).ready(function () {
            // Initialize map
            const map = L.map('alertMap').setView([34.0522, -118.2437], 10);
            let currentMapLayer = 'default';
            
            // Define map layers
            const defaultLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
            });

            // Map type toggle
            $('#defaultMapBtn').click(function() {
                if (currentMapLayer !== 'default') {
                    satelliteLayer.remove();
                    defaultLayer.addTo(map);
                    currentMapLayer = 'default';
                    $(this).addClass('active');
                    $('#satelliteMapBtn').removeClass('active');
                }
            });
            
            $('#satelliteMapBtn').click(function() {
                if (currentMapLayer !== 'satellite') {
                    defaultLayer.remove();
                    satelliteLayer.addTo(map);
                    currentMapLayer = 'satellite';
                    $(this).addClass('active');
                    $('#defaultMapBtn').removeClass('active');
                }
            });

            // Initialize layers for different types of alerts
            const geofenceAlertLayer = L.layerGroup().addTo(map);
            const speedAlertLayer = L.layerGroup().addTo(map);
            
            // Custom marker icons
            function getAlertIcon(severity) {
                const iconSize = severity === 'critical' ? 40 : 30;
                
                let iconColor;
                switch(severity) {
                    case 'low': iconColor = '#0dcaf0'; break;
                    case 'medium': iconColor = '#ffc107'; break;
                    case 'high': iconColor = '#dc3545'; break;
                    case 'critical': iconColor = '#dc3545'; break;
                    default: iconColor = '#6c757d';
                }
                
                return L.divIcon({
                    html: `<div class="alert-marker" style="background-color: ${iconColor}; width: ${iconSize}px; height: ${iconSize}px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; ${severity === 'critical' ? 'border: 2px solid white; box-shadow: 0 0 0 1px ' + iconColor + ';' : ''}">
                             <i class="bi bi-exclamation-triangle-fill"></i>
                           </div>`,
                    className: "",
                    iconSize: [iconSize, iconSize],
                    iconAnchor: [iconSize/2, iconSize/2]
                });
            }
            
            // Load alert logs from API
            function loadAlertLogs() {
                // Clear existing layers
                geofenceAlertLayer.clearLayers();
                speedAlertLayer.clearLayers();
                
                // Clear the list
                $('#alertList').html('<div class="text-center py-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading alerts...</p></div>');
                
                // Get filter values
                const alertType = $('#filterAlertType').val();
                const selectedSeverities = $('.filter-severity:checked').map(function() {
                    return $(this).val();
                }).get();
                const timePeriod = $('#filterTimePeriod').val();
                
                // Make API request
                $.ajax({
                    url: '/Alert/GetAlertLogs',
                    type: 'GET',
                    success: function(alertLogs) {
                        // Filter alerts based on criteria
                        const filteredAlerts = alertLogs.filter(log => {
                            // Filter by type
                            if (alertType !== 'all' && log.alertType !== alertType) {
                                return false;
                            }
                            
                            // Filter by severity
                            if (!selectedSeverities.includes(log.severity)) {
                                return false;
                            }
                            
                            // Filter by time
                            const logDate = new Date(log.timestamp);
                            const cutoffDate = new Date();
                            cutoffDate.setHours(cutoffDate.getHours() - parseInt(timePeriod));
                            if (logDate < cutoffDate) {
                                return false;
                            }
                            
                            return true;
                        });
                        
                        if (filteredAlerts.length > 0) {
                            // Clear list
                            $('#alertList').empty();
                            
                            // Process and display alerts
                            filteredAlerts.forEach(function(alert) {
                                if (alert.latitude && alert.longitude) {
                                    // Create marker based on alert type
                                    let marker;
                                    let layer;
                                    
                                    if (alert.alertType.startsWith('geofence_')) {
                                        marker = L.marker([alert.latitude, alert.longitude], {
                                            icon: getAlertIcon(alert.severity)
                                        }).bindPopup(`
                                            <strong>${alert.alertName}</strong><br>
                                            <span class="text-muted">${new Date(alert.timestamp).toLocaleString()}</span><br>
                                            ${alert.details}<br>
                                            <a href="#" class="view-alert-details" data-id="${alert.id}">View Details</a>
                                        `);
                                        layer = geofenceAlertLayer;
                                    } else if (alert.alertType === 'speed') {
                                        marker = L.marker([alert.latitude, alert.longitude], {
                                            icon: getAlertIcon(alert.severity)
                                        }).bindPopup(`
                                            <strong>${alert.alertName}</strong><br>
                                            <span class="text-muted">${new Date(alert.timestamp).toLocaleString()}</span><br>
                                            ${alert.details}<br>
                                            <a href="#" class="view-alert-details" data-id="${alert.id}">View Details</a>
                                        `);
                                        layer = speedAlertLayer;
                                    }
                                    
                                    if (marker && layer) {
                                        // Store alert data with the marker
                                        marker.alertData = alert;
                                        layer.addLayer(marker);
                                        
                                        // Add to list
                                        $('#alertList').append(`
                                            <div class="list-group-item list-group-item-action alert-list-item" data-id="${alert.id}">
                                                <div class="d-flex align-items-center">
                                                    <div class="alert-icon ${alert.severity}">
                                                        <i class="bi bi-exclamation-triangle-fill"></i>
                                                    </div>
                                                    <div>
                                                        <div class="fw-bold">${alert.alertName}</div>
                                                        <small class="text-muted">${new Date(alert.timestamp).toLocaleString()}</small>
                                                    </div>
                                                </div>
                                            </div>
                                        `);
                                    }
                                }
                            });
                            
                            // Add click event to list items
                            $('.alert-list-item').click(function() {
                                const alertId = $(this).data('id');
                                
                                // Find marker with this alert ID and center map
                                let found = false;
                                
                                [geofenceAlertLayer, speedAlertLayer].forEach(function(layer) {
                                    layer.eachLayer(function(marker) {
                                        if (marker.alertData && marker.alertData.id === alertId) {
                                            // Center map on this marker
                                            map.setView(marker.getLatLng(), 15);
                                            // Open the popup
                                            marker.openPopup();
                                            found = true;
                                        }
                                    });
                                });
                                
                                if (!found) {
                                    // If marker not found (no coordinates), show alert details modal
                                    showAlertDetails(alertId);
                                }
                            });
                            
                        } else {
                            $('#alertList').html('<div class="text-center py-4"><p>No alerts found matching your criteria</p></div>');
                        }
                    },
                    error: function(error) {
                        console.error('Error loading alert logs:', error);
                        $('#alertList').html('<div class="text-center py-4"><p class="text-danger">Failed to load alerts</p></div>');
                    }
                });
            }
            
            // Initial load
            loadAlertLogs();
            
            // Apply filters
            $('#applyFilters').click(function() {
                loadAlertLogs();
            });
            
            // Filter alerts in the list
            $('#searchAlert').on('keyup', function() {
                const value = $(this).val().toLowerCase();
                $('.alert-list-item').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });
            
            // Show alert details
            function showAlertDetails(alertId) {
                // Show modal with loading state
                $('#alertDetailsModal').modal('show');
                $('.alert-details-content').html(`
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading details...</p>
                    </div>
                `);
                
                // Set acknowledge button href
                $('#acknowledgeAlertBtn').attr('href', `/Alert/Acknowledge/${alertId}`);
                
                // Find alert in the current dataset
                let alertData = null;
                [geofenceAlertLayer, speedAlertLayer].forEach(function(layer) {
                    layer.eachLayer(function(marker) {
                        if (marker.alertData && marker.alertData.id === alertId) {
                            alertData = marker.alertData;
                        }
                    });
                });
                
                if (alertData) {
                    // Format details
                    let detailsHtml = `
                        <div class="alert ${alertData.severity === 'critical' ? 'alert-danger' : alertData.severity === 'high' ? 'alert-danger' : alertData.severity === 'medium' ? 'alert-warning' : 'alert-info'} mb-3">
                            <h5>${alertData.alertName}</h5>
                            <p>${alertData.details}</p>
                        </div>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <th>Type:</th>
                                <td>${alertData.alertType.replace('_', ' ').toUpperCase()}</td>
                            </tr>
                            <tr>
                                <th>Severity:</th>
                                <td><span class="badge ${alertData.severityBadgeClass}">${alertData.severity.toUpperCase()}</span></td>
                            </tr>
                            <tr>
                                <th>Time:</th>
                                <td>${new Date(alertData.timestamp).toLocaleString()}</td>
                            </tr>
                            <tr>
                                <th>Status:</th>
                                <td>${alertData.acknowledged ? 'Acknowledged' : '<span class="badge bg-warning">Pending</span>'}</td>
                            </tr>
                    `;
                    
                    if (alertData.latitude && alertData.longitude) {
                        detailsHtml += `
                            <tr>
                                <th>Location:</th>
                                <td>${alertData.latitude.toFixed(6)}, ${alertData.longitude.toFixed(6)}</td>
                            </tr>
                        `;
                    }
                    
                    detailsHtml += `</table>`;
                    
                    // Add resolution if acknowledged
                    if (alertData.acknowledged) {
                        detailsHtml += `
                            <div class="mt-3">
                                <h6>Resolution</h6>
                                <p>${alertData.resolution || 'No resolution details provided.'}</p>
                                <small class="text-muted">Acknowledged at: ${new Date(alertData.acknowledgedAt).toLocaleString()}</small>
                            </div>
                        `;
                    }
                    
                    $('.alert-details-content').html(detailsHtml);
                    
                    // Show/hide acknowledge button
                    if (!alertData.acknowledged) {
                        $('#acknowledgeAlertBtn').removeClass('d-none');
                    } else {
                        $('#acknowledgeAlertBtn').addClass('d-none');
                    }
                } else {
                    // Load from API if not found in current dataset
                    $.ajax({
                        url: `/Alert/Acknowledge/${alertId}`,
                        type: 'GET',
                        success: function(response) {
                            // Extract just the alert details
                            const detailsHtml = $(response).find('.card-body').html();
                            $('.alert-details-content').html(detailsHtml);
                            
                            // Check if the alert is already acknowledged
                            const isAcknowledged = $(response).find('.badge:contains("Acknowledged")').length > 0;
                            if (!isAcknowledged) {
                                $('#acknowledgeAlertBtn').removeClass('d-none');
                            } else {
                                $('#acknowledgeAlertBtn').addClass('d-none');
                            }
                        },
                        error: function(error) {
                            $('.alert-details-content').html(`
                                <div class="alert alert-danger">
                                    Failed to load alert details
                                </div>
                            `);
                        }
                    });
                }
            }
            
            // Handle view details click in popups
            $(document).on('click', '.view-alert-details', function(e) {
                e.preventDefault();
                const alertId = $(this).data('id');
                showAlertDetails(alertId);
            });
        });
    </script>
} 