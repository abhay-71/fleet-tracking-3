@model FleetTracking.Models.ComponentHealth

@{
    ViewData["Title"] = $"{Model.Name} Component Health";
}

<div class="container-fluid">
    <h1 class="mt-2 mb-4">
        <i class="fas fa-microchip me-2"></i> @Model.Name Component Health
    </h1>
    
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="fas fa-info-circle me-2"></i> Status Overview</h5>
                </div>
                <div class="card-body text-center">
                    @switch (Model.Status)
                    {
                        case SystemStatus.Healthy:
                            <div class="display-1 text-success mb-3"><i class="fas fa-check-circle"></i></div>
                            <div class="display-6 mb-2">Healthy</div>
                            break;
                        case SystemStatus.Degraded:
                            <div class="display-1 text-warning mb-3"><i class="fas fa-exclamation-triangle"></i></div>
                            <div class="display-6 mb-2">Degraded</div>
                            break;
                        case SystemStatus.Unhealthy:
                            <div class="display-1 text-danger mb-3"><i class="fas fa-exclamation-circle"></i></div>
                            <div class="display-6 mb-2">Unhealthy</div>
                            break;
                        case SystemStatus.Offline:
                            <div class="display-1 text-dark mb-3"><i class="fas fa-power-off"></i></div>
                            <div class="display-6 mb-2">Offline</div>
                            break;
                        default:
                            <div class="display-1 text-secondary mb-3"><i class="fas fa-question-circle"></i></div>
                            <div class="display-6 mb-2">Unknown</div>
                            break;
                    }
                    
                    <p class="text-muted">@Model.Description</p>
                    
                    <div class="d-flex justify-content-between mt-4">
                        <div>
                            <small class="d-block text-muted">Response Time</small>
                            <span class="fw-bold">@Model.ResponseTime ms</span>
                        </div>
                        <div>
                            <small class="d-block text-muted">Last Checked</small>
                            <span class="fw-bold">@Model.LastChecked.ToString("MMM dd, yyyy HH:mm:ss")</span>
                        </div>
                        <div>
                            <small class="d-block text-muted">Uptime</small>
                            <span class="fw-bold">@Model.UptimePercentage%</span>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button id="checkComponentHealth" class="btn btn-primary">
                        <i class="fas fa-sync-alt"></i> Check Health Now
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="fas fa-chart-line me-2"></i> Health Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6>Response Time (ms)</h6>
                            <canvas id="responseTimeChart" height="150"></canvas>
                        </div>
                        <div class="col-md-6">
                            <h6>Uptime Percentage</h6>
                            <canvas id="uptimeChart" height="150"></canvas>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12">
                            <h6>Health Status History</h6>
                            <div class="table-responsive">
                                <table id="healthHistoryTable" class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Status</th>
                                            <th>Response Time</th>
                                            <th>Message</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-1).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-success">Healthy</span></td>
                                            <td>@(Model.ResponseTime - 12) ms</td>
                                            <td>Component running normally</td>
                                        </tr>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-2).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-success">Healthy</span></td>
                                            <td>@(Model.ResponseTime - 8) ms</td>
                                            <td>Component running normally</td>
                                        </tr>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-3).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-success">Healthy</span></td>
                                            <td>@(Model.ResponseTime - 5) ms</td>
                                            <td>Component running normally</td>
                                        </tr>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-4).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-warning">Degraded</span></td>
                                            <td>@(Model.ResponseTime + 85) ms</td>
                                            <td>High response time detected</td>
                                        </tr>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-5).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-danger">Unhealthy</span></td>
                                            <td>@(Model.ResponseTime + 210) ms</td>
                                            <td>Connection timeout</td>
                                        </tr>
                                        <tr>
                                            <td>@DateTime.Now.AddHours(-6).ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-success">Healthy</span></td>
                                            <td>@(Model.ResponseTime - 15) ms</td>
                                            <td>Component running normally</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="fas fa-cogs me-2"></i> Component Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th colspan="2">Basic Configuration</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th style="width: 30%;">Component ID</th>
                                            <td>@Model.Name.ToLower().Replace(" ", "-")</td>
                                        </tr>
                                        <tr>
                                            <th>Version</th>
                                            <td>1.5.3</td>
                                        </tr>
                                        <tr>
                                            <th>Endpoint</th>
                                            <td>/api/@Model.Name.ToLower().Replace(" ", "-")</td>
                                        </tr>
                                        <tr>
                                            <th>Health Check Interval</th>
                                            <td>5 minutes</td>
                                        </tr>
                                        <tr>
                                            <th>Timeout Threshold</th>
                                            <td>30 seconds</td>
                                        </tr>
                                        <tr>
                                            <th>Auto-Restart</th>
                                            <td><span class="badge bg-success">Enabled</span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th colspan="2">Dependencies</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th style="width: 40%;">Database</th>
                                            <td><span class="badge bg-success">Connected</span></td>
                                        </tr>
                                        <tr>
                                            <th>Cache</th>
                                            <td><span class="badge bg-success">Connected</span></td>
                                        </tr>
                                        <tr>
                                            <th>Message Queue</th>
                                            <td><span class="badge bg-success">Connected</span></td>
                                        </tr>
                                        <tr>
                                            <th>Storage</th>
                                            <td><span class="badge bg-success">Connected</span></td>
                                        </tr>
                                        <tr>
                                            <th>External API</th>
                                            <td><span class="badge bg-warning">Degraded</span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button id="editConfiguration" class="btn btn-primary">
                        <i class="fas fa-edit"></i> Edit Configuration
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="fas fa-exclamation-triangle me-2"></i> Recent Issues</h5>
                </div>
                <div class="card-body">
                    @if (Model.Status == SystemStatus.Healthy)
                    {
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle me-2"></i> No recent issues detected for this component.
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            <div class="list-group-item list-group-item-action flex-column align-items-start">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">High Response Time</h6>
                                    <small>@DateTime.Now.AddHours(-4).ToString("MMM dd, HH:mm")</small>
                                </div>
                                <p class="mb-1">Response time exceeded threshold (200ms). Current: @(Model.ResponseTime + 85)ms.</p>
                                <small class="text-muted">Possible causes: High server load, network congestion</small>
                            </div>
                            <div class="list-group-item list-group-item-action flex-column align-items-start">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">Connection Timeout</h6>
                                    <small>@DateTime.Now.AddHours(-5).ToString("MMM dd, HH:mm")</small>
                                </div>
                                <p class="mb-1">Connection to component timed out after 30 seconds.</p>
                                <small class="text-muted">Possible causes: Service unavailable, network issues</small>
                            </div>
                            <div class="list-group-item list-group-item-action flex-column align-items-start">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">External API Degraded</h6>
                                    <small>@DateTime.Now.AddHours(-8).ToString("MMM dd, HH:mm")</small>
                                </div>
                                <p class="mb-1">External API dependency is experiencing degraded performance.</p>
                                <small class="text-muted">Impact: Slower response times for certain operations</small>
                            </div>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <a href="@Url.Action("Errors", "SystemHealth")" class="btn btn-primary">
                        <i class="fas fa-history"></i> View All Issues
                    </a>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="fas fa-tools me-2"></i> Troubleshooting</h5>
                </div>
                <div class="card-body">
                    <div class="accordion" id="troubleshootingAccordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                    <i class="fas fa-stopwatch me-2"></i> High Response Time
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#troubleshootingAccordion">
                                <div class="accordion-body">
                                    <p>If the component is experiencing high response times, try the following:</p>
                                    <ol>
                                        <li>Check server CPU and memory usage</li>
                                        <li>Verify database query performance</li>
                                        <li>Check network latency between services</li>
                                        <li>Restart the component service</li>
                                        <li>Scale up resources if consistently high</li>
                                    </ol>
                                    <button class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-play"></i> Run Diagnostics
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingTwo">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    <i class="fas fa-power-off me-2"></i> Service Unavailable
                                </button>
                            </h2>
                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#troubleshootingAccordion">
                                <div class="accordion-body">
                                    <p>If the component service is unavailable, follow these steps:</p>
                                    <ol>
                                        <li>Check if the service process is running</li>
                                        <li>Verify service logs for error messages</li>
                                        <li>Check dependencies status</li>
                                        <li>Restart the service manually</li>
                                        <li>Verify network connectivity</li>
                                    </ol>
                                    <div class="mt-3">
                                        <button class="btn btn-outline-primary btn-sm me-2">
                                            <i class="fas fa-file-alt"></i> View Logs
                                        </button>
                                        <button class="btn btn-outline-success btn-sm">
                                            <i class="fas fa-play"></i> Restart Service
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingThree">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                    <i class="fas fa-exclamation-circle me-2"></i> Dependency Issues
                                </button>
                            </h2>
                            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#troubleshootingAccordion">
                                <div class="accordion-body">
                                    <p>For dependency-related issues, try these solutions:</p>
                                    <ol>
                                        <li>Check status of each dependency service</li>
                                        <li>Verify connection strings and credentials</li>
                                        <li>Check for network restrictions or firewall issues</li>
                                        <li>Verify API keys and authentication parameters</li>
                                        <li>Check for rate limiting on external services</li>
                                    </ol>
                                    <button class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-plug"></i> Test Connections
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Configuration Modal -->
<div class="modal fade" id="configurationModal" tabindex="-1" aria-labelledby="configurationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="configurationModalLabel">
                    <i class="fas fa-cogs me-2"></i> Edit @Model.Name Configuration
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="componentConfigForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="componentVersion" class="form-label">Version</label>
                                <input type="text" class="form-control" id="componentVersion" value="1.5.3" disabled>
                            </div>
                            <div class="mb-3">
                                <label for="componentEndpoint" class="form-label">Endpoint</label>
                                <input type="text" class="form-control" id="componentEndpoint" value="/api/@Model.Name.ToLower().Replace(" ", "-")">
                            </div>
                            <div class="mb-3">
                                <label for="healthCheckInterval" class="form-label">Health Check Interval (minutes)</label>
                                <input type="number" class="form-control" id="healthCheckInterval" value="5" min="1" max="60">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="timeoutThreshold" class="form-label">Timeout Threshold (seconds)</label>
                                <input type="number" class="form-control" id="timeoutThreshold" value="30" min="5" max="300">
                            </div>
                            <div class="mb-3">
                                <label for="autoRestart" class="form-label">Auto-Restart</label>
                                <select class="form-select" id="autoRestart">
                                    <option value="true" selected>Enabled</option>
                                    <option value="false">Disabled</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="logLevel" class="form-label">Log Level</label>
                                <select class="form-select" id="logLevel">
                                    <option value="INFO" selected>INFO</option>
                                    <option value="DEBUG">DEBUG</option>
                                    <option value="WARNING">WARNING</option>
                                    <option value="ERROR">ERROR</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="componentDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="componentDescription" rows="3">@Model.Description</textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Dependencies</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="databaseDep" checked>
                            <label class="form-check-label" for="databaseDep">
                                Database
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="cacheDep" checked>
                            <label class="form-check-label" for="cacheDep">
                                Cache
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="mqDep" checked>
                            <label class="form-check-label" for="mqDep">
                                Message Queue
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="storageDep" checked>
                            <label class="form-check-label" for="storageDep">
                                Storage
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="externalApiDep" checked>
                            <label class="form-check-label" for="externalApiDep">
                                External API
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveConfiguration">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#healthHistoryTable').DataTable({
                responsive: true,
                order: [[0, 'desc']], // Sort by timestamp desc
                pageLength: 10
            });
            
            // Create response time chart
            createLineChart('responseTimeChart', 'Response Time (ms)', 'rgba(255, 99, 132, 1)', 'rgba(255, 99, 132, 0.2)');
            
            // Create uptime chart
            createLineChart('uptimeChart', 'Uptime (%)', 'rgba(75, 192, 192, 1)', 'rgba(75, 192, 192, 0.2)');
            
            // Check component health button
            $('#checkComponentHealth').click(function() {
                $(this).html('<i class="fas fa-spinner fa-spin"></i> Checking...');
                
                // Simulate API call
                setTimeout(function() {
                    $('#checkComponentHealth').html('<i class="fas fa-sync-alt"></i> Check Health Now');
                    
                    // Show success message
                    if (typeof toastr !== 'undefined') {
                        toastr.success('Component health check completed.');
                    } else {
                        alert('Component health check completed.');
                    }
                    
                    // Reload the page to show new data
                    location.reload();
                }, 2000);
            });
            
            // Edit configuration button
            $('#editConfiguration').click(function() {
                $('#configurationModal').modal('show');
            });
            
            // Save configuration button
            $('#saveConfiguration').click(function() {
                $(this).html('<i class="fas fa-spinner fa-spin"></i> Saving...');
                
                // Simulate API call
                setTimeout(function() {
                    $('#saveConfiguration').html('Save Changes');
                    $('#configurationModal').modal('hide');
                    
                    // Show success message
                    if (typeof toastr !== 'undefined') {
                        toastr.success('Configuration saved successfully.');
                    } else {
                        alert('Configuration saved successfully.');
                    }
                }, 1500);
            });
            
            // Create line chart
            function createLineChart(canvasId, label, borderColor, backgroundColor) {
                const canvas = document.getElementById(canvasId);
                if (!canvas) return;
                
                // Generate sample data
                const labels = [];
                const currentDate = new Date();
                
                for (let i = 23; i >= 0; i--) {
                    const date = new Date(currentDate);
                    date.setHours(date.getHours() - i);
                    labels.push(date.getHours() + ':00');
                }
                
                // Generate random data
                const data = [];
                const isResponseTime = label.includes('Response');
                
                for (let i = 0; i < 24; i++) {
                    if (isResponseTime) {
                        // Response time: 30-200ms
                        data.push(Math.floor(Math.random() * 170) + 30);
                    } else {
                        // Uptime: 90-100%
                        data.push(Math.floor(Math.random() * 10) + 90);
                    }
                }
                
                // Add some spikes for visualization
                if (isResponseTime) {
                    data[5] = 320; // Spike at hour 5
                    data[6] = 280;
                    data[7] = 240;
                    data[8] = 180;
                    data[18] = 220; // Spike at hour 18
                } else {
                    data[5] = 75; // Drop at hour 5
                    data[6] = 80;
                    data[18] = 85; // Drop at hour 18
                }
                
                new Chart(canvas, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: label,
                            data: data,
                            borderColor: borderColor,
                            backgroundColor: backgroundColor,
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: isResponseTime ? true : false,
                                suggestedMin: isResponseTime ? 0 : 70,
                                suggestedMax: isResponseTime ? 350 : 100
                            }
                        }
                    }
                });
            }
        });
    </script>
} 